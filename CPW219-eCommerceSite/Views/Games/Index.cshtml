@model IEnumerable<Game>

@{
    ViewData["Title"] = "Game Catalog";
}

<h1>Game Catalog</h1>

@if (TempData["Message"] != null)
{
	<div class="alert alert-success alert-dismissible fade show" role="alert">
		@TempData["Message"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
	</div>
}

<p>
    <a asp-action="Create" asp-controller="Games">Create Game</a>
</p>
@if (Model.Count() != 0)
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.GameId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Title)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Price)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Game item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.GameId)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @* @* This is a Razor comment * @: Razor comments are used within the Razor syntax and are not rendered in the HTML output.
                They are intended for server-side use only and are ignored during the rendering of the view. *@
                        @* <!-- This is an HTML comment -->: If you want to add comments that are visible in the rendered HTML
                (which can be viewed in the browser's "View Source" or "Inspect Element"), use HTML comments. *@

                        @* These anchor tags are creating links that, when clicked, will navigate to the Edit, Details, or Delete actions in the Games controller.
                Each link will include the GameId as a route parameter in the URL, allowing the controller to know which specific game to edit,
                view details for, or delete. The styling of the links is handled by Bootstrap classes, making them look like buttons. *@

                        <a class="btn btn-primary" asp-action="Edit" asp-route-id="@item.GameId">Edit</a>
                        <a class="btn btn-secondary" asp-action="Details" asp-route-id="@item.GameId">Details</a>
                        <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.GameId">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h2>There are no games for this page</h2>
}

